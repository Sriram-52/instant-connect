/**
 * Generated by orval v6.14.4 üç∫
 * Do not edit manually.
 * Instant Connect API
 * The Instant Connect API description
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { User, CreateUserDto, UpdateUserDto } from "./models";
import { baseInstance } from "../../instances/baseInstance";
import type { ErrorType } from "../../instances/baseInstance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const userControllerGetAll = (signal?: AbortSignal) => {
  return baseInstance<User[]>({ url: `/users/getAll`, method: "get", signal });
};

export const getUserControllerGetAllQueryKey = () => [`/users/getAll`] as const;

export const getUserControllerGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userControllerGetAll>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof userControllerGetAll>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerGetAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerGetAll>>> = ({ signal }) =>
    userControllerGetAll(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type UserControllerGetAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetAll>>
>;
export type UserControllerGetAllQueryError = ErrorType<unknown>;

export const useUserControllerGetAll = <
  TData = Awaited<ReturnType<typeof userControllerGetAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userControllerGetAll>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUserControllerGetAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const userControllerCreate = (createUserDto: CreateUserDto) => {
  return baseInstance<User>({
    url: `/users/create`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createUserDto,
  });
};

export const getUserControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerCreate>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerCreate>>
>;
export type UserControllerCreateMutationBody = CreateUserDto;
export type UserControllerCreateMutationError = ErrorType<unknown>;

export const useUserControllerCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}) => {
  const mutationOptions = getUserControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const userControllerUpdate = (id: string, updateUserDto: UpdateUserDto) => {
  return baseInstance<User>({
    url: `/users/${id}/update`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: updateUserDto,
  });
};

export const getUserControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerUpdate>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    { id: string; data: UpdateUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return userControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdate>>
>;
export type UserControllerUpdateMutationBody = UpdateUserDto;
export type UserControllerUpdateMutationError = ErrorType<unknown>;

export const useUserControllerUpdate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
}) => {
  const mutationOptions = getUserControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
